# vim: syntax=pf
set skip on lo0
set optimization high-latency

wlan=ath0

altq on $wlan cbq bandwidth 0.50Mb \
	qlimit 1500 \
	queue {std_ssh, std_ack}
queue std_ssh bandwidth 90% priority 1 cbq(default, borrow)
queue std_ack bandwidth 10% priority 0 cbq(borrow)

block return log
block inet6
# ignore dhcp,
# ignore dhcp,
block in quick on $wlan inet proto udp \
	from 0.0.0.0 port bootpc \
	to 255.255.255.255 port bootps
# netbios,
block in quick on $wlan inet proto udp \
	from any port { netbios-ns, netbios-dgm } \
	to any port { netbios-ns, netbios-dgm }
# and iTunes blabber.
block in quick on $wlan inet proto udp \
	from any port 5353 to any port 5353

# allow icmp ping anywhere
pass out inet proto icmp \
	all \
	icmp-type echoreq code 0

# allow icmp ping from lan
pass in quick log on lan inet proto icmp \
	from lan:network to lan \
	icmp-type echoreq code 0

# accept ssh,
pass in quick log on lan inet proto tcp \
	from lan:network \
	to lan port ssh \
	keep state

# and dhcpd on lan interface
pass in quick on lan inet proto udp \
	from lan:network port bootpc \
	to any port bootpc \
	keep state

# allow only ssh to tunnel endpoints
pass out quick on $wlan inet proto tcp \
	from $wlan \
	to { 88.80.6.213, 173.237.211.152 } port 1984 \
	queue (std_ssh, std_ack) \
	modulate state

pass in on lan inet from lan:network to !lan

# NAT lan traffic via tunnel interface.
pass out on tun inet \
	from lan:network to any \
	nat-to (tun) modulate state

# pass out all egress(tunnel) traffic.
pass out on tun inet \
	from (tun) to any \
	keep state
